generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  profilePhotoUrl  String? 
  fullName  String   // ğŸ†• Ad Soyad
  userName  String   @unique // ğŸ†• KullanÄ±cÄ± AdÄ±
  email     String   @unique
  password  String
  bio       String?
  createdAt DateTime @default(now())
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  uploads   Upload[]
  
  // Takip iliÅŸkileri
  followers    Follow[] @relation("following")
  following    Follow[] @relation("follower")
  likes     Like[] // KullanÄ±cÄ±nÄ±n beÄŸenileri
  dislikes  Dislike[] // KullanÄ±cÄ±nÄ±n beÄŸenmedikleri
  comments  Comment[] // KullanÄ±cÄ±nÄ±n yaptÄ±ÄŸÄ± yorumlar
  commentLikes CommentLike[] // KullanÄ±cÄ±nÄ±n beÄŸendiÄŸi yorumlar
  commentDislikes CommentDislike[] // KullanÄ±cÄ±nÄ±n beÄŸenmediÄŸi yorumlar

  // MesajlaÅŸma iliÅŸkileri
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  // Sohbet iliÅŸkisi
  chatParticipants ChatParticipant[]
  messageDeletes MessageDelete[] @relation("UserMessageDeletes")
}

model Upload {
  id        Int      @id @default(autoincrement())
  mediaUrl  String
  caption   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  analysis  Json?    // <-- Analiz sonucu iÃ§in yeni alan
  likes     Like[]   // Postun beÄŸenileri
  dislikes  Dislike[] // Postun beÄŸenmeme iliÅŸkisi
  comments  Comment[] // Postun yorumlarÄ±
}

// Yeni Follow modeli
model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  upload    Upload   @relation(fields: [uploadId], references: [id])
  uploadId  Int
  createdAt DateTime @default(now())

  @@unique([userId, uploadId]) // Bir kullanÄ±cÄ± bir postu bir kez beÄŸenebilir
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  upload    Upload   @relation(fields: [uploadId], references: [id])
  uploadId  Int
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  Int?
  replies   Comment[] @relation("CommentReplies")
  commentLikes CommentLike[] // Yoruma yapÄ±lan beÄŸeniler
  commentDislikes CommentDislike[] // Yoruma yapÄ±lan beÄŸenmeme
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  createdAt DateTime @default(now())

  @@unique([userId, commentId]) // Bir kullanÄ±cÄ± bir yorumu bir kez beÄŸenebilir
}

model Dislike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  upload    Upload   @relation(fields: [uploadId], references: [id])
  uploadId  Int
  createdAt DateTime @default(now())

  @@unique([userId, uploadId]) // Bir kullanÄ±cÄ± bir postu bir kez dislike edebilir
}

model CommentDislike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  createdAt DateTime @default(now())

  @@unique([userId, commentId]) // Bir kullanÄ±cÄ± bir yorumu bir kez dislike edebilir
}

// MesajlaÅŸma modelleri
model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  
  // Ä°liÅŸkiler
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId  Int
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int
  chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    Int?
  deletedBy MessageDelete[] @relation("MessageMessageDeletes")

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([chatId])
}

model Chat {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  chat    Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId  Int
  joinedAt DateTime @default(now())

  @@unique([userId, chatId])
  @@index([chatId])
  @@index([userId])
}

model MessageDelete {
  id        Int      @id @default(autoincrement())
  user      User     @relation("UserMessageDeletes", fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   Message  @relation("MessageMessageDeletes", fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int
  deletedAt DateTime @default(now())

  @@unique([userId, messageId]) // Bir kullanÄ±cÄ± bir mesajÄ± bir kez silebilir
  @@index([userId])
  @@index([messageId])
}
