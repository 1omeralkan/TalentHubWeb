generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  profilePhotoUrl  String? 
  fullName  String   // ğŸ†• Ad Soyad
  userName  String   @unique // ğŸ†• KullanÄ±cÄ± AdÄ±
  email     String   @unique
  password  String
  bio       String?
  createdAt DateTime @default(now())
  uploads   Upload[]
  
  // Takip iliÅŸkileri
  followers    Follow[] @relation("following")
  following    Follow[] @relation("follower")
  likes     Like[] // KullanÄ±cÄ±nÄ±n beÄŸenileri
  comments  Comment[] // KullanÄ±cÄ±nÄ±n yaptÄ±ÄŸÄ± yorumlar
  commentLikes CommentLike[] // KullanÄ±cÄ±nÄ±n beÄŸendiÄŸi yorumlar
}

model Upload {
  id        Int      @id @default(autoincrement())
  mediaUrl  String
  caption   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  analysis  Json?    // <-- Analiz sonucu iÃ§in yeni alan
  likes     Like[]   // Postun beÄŸenileri
  comments  Comment[] // Postun yorumlarÄ±
}

// Yeni Follow modeli
model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  upload    Upload   @relation(fields: [uploadId], references: [id])
  uploadId  Int
  createdAt DateTime @default(now())

  @@unique([userId, uploadId]) // Bir kullanÄ±cÄ± bir postu bir kez beÄŸenebilir
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  upload    Upload   @relation(fields: [uploadId], references: [id])
  uploadId  Int
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  Int?
  replies   Comment[] @relation("CommentReplies")
  commentLikes CommentLike[] // Yoruma yapÄ±lan beÄŸeniler
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  createdAt DateTime @default(now())

  @@unique([userId, commentId]) // Bir kullanÄ±cÄ± bir yorumu bir kez beÄŸenebilir
}
